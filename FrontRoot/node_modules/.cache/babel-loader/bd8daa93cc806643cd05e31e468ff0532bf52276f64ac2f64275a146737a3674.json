{"ast":null,"code":"var _jsxFileName = \"/Users/joshhartnett/ServerStomp/stomp/src/ServerQue/StompHookProps.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport StompHook from './StompHook';\nimport { useLocation } from 'react-router-dom';\nimport Banker from '../front/banker';\nimport Console from '../front/console';\nimport Player from '../front/player';\nimport './StompHookProps.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StompHookProps() {\n  _s();\n  // const location = useLocation();\n\n  // const { destination, headers } = location.state;\n  // const lobbyName = headers.lobbyName;\n  const [destination, setDestination] = useState(\"/app/create\");\n  const [lobbyName, setLobbyName] = useState(\"test\");\n  const [headers, setHeaders] = useState({\n    lobbyName: lobbyName\n  });\n  const subscription = \"/user/lobby\";\n  const body = \"Income\";\n  const [receivedMessage, setReceivedMessage] = useState(\"\");\n  const [latestUpdateMessage, setLatestUpdateMessage] = useState(\"\");\n  const messageRef = useRef([]);\n  const handleReceivedMessage = message => {\n    setReceivedMessage(message);\n  };\n\n  // useEffect(() => {\n  //   if (typeof receivedMessage === 'string' && receivedMessage.trim().startsWith('{') && receivedMessage.trim().endsWith('}')) {\n  //     const parsedMessage = JSON.parse(receivedMessage);\n  //     if (parsedMessage.type === 'UPDATE') {\n  //       const { userMessage, content } = parsedMessage;\n  //       // console.log(userMessage, content);\n  //       // console.log(JSON.parse(receivedMessage).content.players);\n  //     } \n  //   }\n  // }, [receivedMessage]);\n\n  const updateMessageRef = useRef([]);\n  useEffect(() => {\n    messageRef.current.push(receivedMessage); // useRef로 저장\n    const updateMessages = messageRef.current.filter(msg => {\n      // {로 시작하고 }로 끝나는 문자열 중에서 type이 UPDATE인 것만 필터링\n      if (msg.startsWith(\"{\") && msg.endsWith(\"}\")) {\n        const parsedMsg = JSON.parse(msg);\n        return parsedMsg.type === \"UPDATE\";\n      } else {\n        return false;\n      }\n    });\n    console.log(updateMessages);\n    // updateMessageRef에 필터링된 메시지들 저장\n    updateMessageRef.current = updateMessages;\n  }, [receivedMessage]);\n\n  // setLatestUpdateMessage(updateMessageRef[0]);\n  // useEffect(() => {\n  //   if (typeof receivedMessage === 'string' && receivedMessage.trim().startsWith('{') && receivedMessage.trim().endsWith('}')) {\n  //       setLatestUpdateMessage(messageRef.current.slice().reverse().find(msg => {\n  //       const parsedMsg = JSON.parse(msg);\n  //       return parsedMsg.type === 'UPDATE';\n  //     }));\n\n  //     const parsedMessage = JSON.parse(latestUpdateMessage);\n  //     const { userMessage, content } = parsedMessage;\n  //     console.log(userMessage);\n  //     console.log(content.localPlayerCards);\n  //     console.log(content.players[0]);\n  //   }\n  // },[receivedMessage]);\n\n  console.log(updateMessageRef[0]);\n  console.log(JSON.parse(updateMessageRef[0]));\n  // console.log(JSON.parse(updateMessageRef[0]).content.players[0].name);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(StompHook, {\n      subscription: subscription,\n      destination: destination,\n      headers: headers,\n      body: body,\n      onReceivedMessage: handleReceivedMessage,\n      lobbyName: lobbyName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"BankerConsole\",\n      children: [/*#__PURE__*/_jsxDEV(Banker, {\n        receivedMessage: receivedMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Console, {\n        destination: destination,\n        lobbyName: lobbyName,\n        body: body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), updateMessageRef[0] && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        name: JSON.parse(updateMessageRef[0]).content.players[0].name,\n        coins: JSON.parse(updateMessageRef[0]).content.players[0].coins,\n        cardNumbers: JSON.parse(updateMessageRef[0]).content.players[0].cardNumbers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(StompHookProps, \"xFzZ6YBY4Xf64XKJQ5mkPEzeHwE=\");\n_c = StompHookProps;\nexport default StompHookProps;\n// 경로 지정\n// export const STOMP_HOOK_PROPS_PATH = '/stomphookprops';\nvar _c;\n$RefreshReg$(_c, \"StompHookProps\");","map":{"version":3,"names":["React","useState","useEffect","useRef","StompHook","useLocation","Banker","Console","Player","jsxDEV","_jsxDEV","StompHookProps","_s","destination","setDestination","lobbyName","setLobbyName","headers","setHeaders","subscription","body","receivedMessage","setReceivedMessage","latestUpdateMessage","setLatestUpdateMessage","messageRef","handleReceivedMessage","message","updateMessageRef","current","push","updateMessages","filter","msg","startsWith","endsWith","parsedMsg","JSON","parse","type","console","log","children","onReceivedMessage","fileName","_jsxFileName","lineNumber","columnNumber","className","name","content","players","coins","cardNumbers","_c","$RefreshReg$"],"sources":["/Users/joshhartnett/ServerStomp/stomp/src/ServerQue/StompHookProps.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport StompHook from './StompHook';\nimport { useLocation } from 'react-router-dom';\nimport Banker from '../front/banker';\nimport Console from '../front/console';\nimport Player from '../front/player';\n\nimport './StompHookProps.css';\n\nfunction StompHookProps() {\n\n  // const location = useLocation();\n\n  // const { destination, headers } = location.state;\n  // const lobbyName = headers.lobbyName;\n  const [destination, setDestination] = useState(\"/app/create\");\n  const [lobbyName, setLobbyName] = useState(\"test\");\n  const [headers, setHeaders] = useState({lobbyName: lobbyName});\n  const subscription = \"/user/lobby\";\n  const body = \"Income\";\n  const [receivedMessage, setReceivedMessage] = useState(\"\");\n  const [latestUpdateMessage, setLatestUpdateMessage] = useState(\"\");\n  const messageRef = useRef([]);\n\n  const handleReceivedMessage = (message) => {\n    setReceivedMessage(message);\n  };\n\n  // useEffect(() => {\n  //   if (typeof receivedMessage === 'string' && receivedMessage.trim().startsWith('{') && receivedMessage.trim().endsWith('}')) {\n  //     const parsedMessage = JSON.parse(receivedMessage);\n  //     if (parsedMessage.type === 'UPDATE') {\n  //       const { userMessage, content } = parsedMessage;\n  //       // console.log(userMessage, content);\n  //       // console.log(JSON.parse(receivedMessage).content.players);\n  //     } \n  //   }\n  // }, [receivedMessage]);\n\n  const updateMessageRef = useRef([]);\n  useEffect(() => {\n    messageRef.current.push(receivedMessage); // useRef로 저장\n    const updateMessages = messageRef.current.filter((msg) => {\n      // {로 시작하고 }로 끝나는 문자열 중에서 type이 UPDATE인 것만 필터링\n      if (msg.startsWith(\"{\") && msg.endsWith(\"}\")) {\n        const parsedMsg = JSON.parse(msg);\n        return parsedMsg.type === \"UPDATE\";\n      } else {\n        return false;\n      }\n    });\n    console.log(updateMessages);\n    // updateMessageRef에 필터링된 메시지들 저장\n    updateMessageRef.current = updateMessages;\n  }, [receivedMessage]);\n\n  // setLatestUpdateMessage(updateMessageRef[0]);\n  // useEffect(() => {\n  //   if (typeof receivedMessage === 'string' && receivedMessage.trim().startsWith('{') && receivedMessage.trim().endsWith('}')) {\n  //       setLatestUpdateMessage(messageRef.current.slice().reverse().find(msg => {\n  //       const parsedMsg = JSON.parse(msg);\n  //       return parsedMsg.type === 'UPDATE';\n  //     }));\n\n  //     const parsedMessage = JSON.parse(latestUpdateMessage);\n  //     const { userMessage, content } = parsedMessage;\n  //     console.log(userMessage);\n  //     console.log(content.localPlayerCards);\n  //     console.log(content.players[0]);\n  //   }\n  // },[receivedMessage]);\n\n  console.log(updateMessageRef[0]);\n  console.log(JSON.parse(updateMessageRef[0]));\n  // console.log(JSON.parse(updateMessageRef[0]).content.players[0].name);\n  return ( \n    <div>\n        <StompHook\n          subscription={subscription}\n          destination={destination}\n          headers={headers}\n          body={body}\n          onReceivedMessage={handleReceivedMessage}\n          lobbyName={lobbyName}\n        />\n        <div className=\"BankerConsole\">\n          <Banker receivedMessage={receivedMessage} />\n          <Console destination={destination} lobbyName={lobbyName} body={body} />\n\n        </div>\n        \n        {updateMessageRef[0] && (\n          <div>\n            <Player name={JSON.parse(updateMessageRef[0]).content.players[0].name} coins={JSON.parse(updateMessageRef[0]).content.players[0].coins} cardNumbers={JSON.parse(updateMessageRef[0]).content.players[0].cardNumbers} />\n          </div>\n        )}\n\n        {/* \n        <div>\n          {updateMessageRef.current.map((msg, index) => (\n        <Player key={index} name={updateMessageRef.current.content.players[0].name} coins={updateMessageRef.current.content.players[0].coins} cardNumbers={updateMessageRef.current.content.players[0].cardNumbers} />\n          ))}\n        </div> */}\n    </div>\n  );\n}\n\nexport default StompHookProps;\n// 경로 지정\n// export const STOMP_HOOK_PROPS_PATH = '/stomphookprops';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}