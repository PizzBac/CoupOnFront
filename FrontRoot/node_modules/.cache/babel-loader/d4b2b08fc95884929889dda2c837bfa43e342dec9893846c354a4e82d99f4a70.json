{"ast":null,"code":"var _jsxFileName = \"/Users/joshhartnett/ServerStomp/stomp/src/ServerQue/StompHookProps.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport StompHook from './StompHook';\nimport { useStompClient } from 'react-stomp-hooks';\nimport { useLocation } from 'react-router-dom';\nimport Banker from '../front/banker';\nimport Console from '../front/console';\nimport Player from '../front/player';\nimport './StompHookProps.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StompHookProps() {\n  _s();\n  const location = useLocation();\n  const stompClient = useStompClient();\n  const {\n    destination,\n    headers\n  } = location.state;\n  const lobbyName = headers.lobbyName;\n  const subscription = \"/user/lobby\";\n  const body = \"Income\";\n  const [receivedMessage, setReceivedMessage] = useState(\"\");\n  const handleReceivedMessage = message => {\n    setReceivedMessage(message);\n  };\n  useEffect(() => {\n    if (stompClient) {\n      stompClient.publish({\n        destination,\n        headers,\n        body\n      });\n      console.log(headers);\n    } else {\n      console.log(\"stompClient is null\");\n    }\n    if (typeof receivedMessage === 'string' && receivedMessage.trim().startsWith('{') && receivedMessage.trim().endsWith('}')) {\n      const parsedMessage = JSON.parse(receivedMessage);\n      if (parsedMessage.type === 'UPDATE') {\n        const {\n          userMessage,\n          content\n        } = parsedMessage;\n        console.log(userMessage, content);\n        console.log(JSON.parse(receivedMessage).content.players);\n      }\n    }\n  }, [receivedMessage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(StompHook, {\n      subscription: subscription,\n      destination: destination,\n      headers: headers,\n      body: body,\n      onReceivedMessage: handleReceivedMessage,\n      lobbyName: lobbyName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"BankerConsole\",\n      children: [/*#__PURE__*/_jsxDEV(Banker, {\n        receivedMessage: receivedMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Console, {\n        destination: destination,\n        body: body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), receivedMessage !== \"\" && typeof receivedMessage === 'string' && receivedMessage.trim().startsWith('{') && receivedMessage.trim().endsWith('}') && JSON.parse(receivedMessage).type === 'UPDATE' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: JSON.parse(receivedMessage).content.players.map(player => /*#__PURE__*/_jsxDEV(Player, {\n        name: player.name,\n        coins: player.coins,\n        cardNumbers: player.cardNumbers\n      }, player.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(StompHookProps, \"zhng4Kjq88LduIf382b1vQw9z0M=\", false, function () {\n  return [useLocation, useStompClient];\n});\n_c = StompHookProps;\nexport default StompHookProps;\n// 경로 지정\n// export const STOMP_HOOK_PROPS_PATH = '/stomphookprops';\nvar _c;\n$RefreshReg$(_c, \"StompHookProps\");","map":{"version":3,"names":["React","useState","useEffect","StompHook","useStompClient","useLocation","Banker","Console","Player","jsxDEV","_jsxDEV","StompHookProps","_s","location","stompClient","destination","headers","state","lobbyName","subscription","body","receivedMessage","setReceivedMessage","handleReceivedMessage","message","publish","console","log","trim","startsWith","endsWith","parsedMessage","JSON","parse","type","userMessage","content","players","children","onReceivedMessage","fileName","_jsxFileName","lineNumber","columnNumber","className","map","player","name","coins","cardNumbers","_c","$RefreshReg$"],"sources":["/Users/joshhartnett/ServerStomp/stomp/src/ServerQue/StompHookProps.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport StompHook from './StompHook';\nimport { useStompClient } from 'react-stomp-hooks';\nimport { useLocation } from 'react-router-dom';\nimport Banker from '../front/banker';\nimport Console from '../front/console';\nimport Player from '../front/player';\n\nimport './StompHookProps.css';\n\nfunction StompHookProps() {\n\n  const location = useLocation();\n  const stompClient = useStompClient();\n\n  const { destination, headers } = location.state;\n  const lobbyName = headers.lobbyName;\n  const subscription = \"/user/lobby\";\n  const body = \"Income\";\n  const [receivedMessage, setReceivedMessage] = useState(\"\");\n\n  const handleReceivedMessage = (message) => {\n    setReceivedMessage(message);\n  };\n\n  useEffect(() => {\n    if (stompClient) {\n      stompClient.publish({\n        destination,\n        headers,\n        body,\n      });\n      console.log(headers);\n    } else {\n      console.log(\"stompClient is null\");\n    }\n\n    if (typeof receivedMessage === 'string' && receivedMessage.trim().startsWith('{') && receivedMessage.trim().endsWith('}')) {\n      const parsedMessage = JSON.parse(receivedMessage);\n      if (parsedMessage.type === 'UPDATE') {\n        const { userMessage, content } = parsedMessage;\n        console.log(userMessage, content);\n        console.log(JSON.parse(receivedMessage).content.players);\n      } \n    }\n  }, [receivedMessage]);\n\n  return (\n    <div>\n      {/* <StompSessionProvider url=\"ws://javaspringbootcoupgamebackend-env.eba-2u3en2tr.ap-northeast-2.elasticbeanstalk.com/ws\"> */}\n        <StompHook\n          subscription={subscription}\n          destination={destination}\n          headers={headers}\n          body={body}\n          onReceivedMessage={handleReceivedMessage}\n          lobbyName={lobbyName}\n        />\n        <div className=\"BankerConsole\">\n          <Banker receivedMessage={receivedMessage} />\n          <Console destination={destination} body={body} />\n        </div>\n        {receivedMessage !== \"\" && typeof receivedMessage === 'string' && receivedMessage.trim().startsWith('{') && receivedMessage.trim().endsWith('}') && JSON.parse(receivedMessage).type === 'UPDATE' &&\n          <div>\n            {JSON.parse(receivedMessage).content.players.map(player => (\n              <Player key={player.name} name={player.name} coins={player.coins} cardNumbers={player.cardNumbers} />\n            ))}\n          </div>\n        }\n      {/* </StompSessionProvider> */}\n    </div>\n  );\n}\n\nexport default StompHookProps;\n// 경로 지정\n// export const STOMP_HOOK_PROPS_PATH = '/stomphookprops';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}