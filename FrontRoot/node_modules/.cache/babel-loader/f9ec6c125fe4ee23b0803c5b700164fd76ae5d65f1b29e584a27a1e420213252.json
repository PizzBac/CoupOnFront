{"ast":null,"code":"var _jsxFileName = \"/Users/joshhartnett/ServerStomp/stomp/src/front/banker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Banker(props) {\n  _s();\n  const {\n    receivedMessage\n  } = props;\n  const [localPlayerCards, setLocalPlayerCards] = useState([]);\n  useEffect(() => {\n    if (typeof receivedMessage === 'string') {\n      try {\n        const messageObj = JSON.parse(receivedMessage);\n        handleReceivedMessage(messageObj);\n      } catch (error) {\n        console.error('Error parsing received message:', error);\n      }\n    }\n  }, [receivedMessage]);\n  function handleReceivedMessage(message) {\n    try {\n      const messageObj = JSON.parse(message);\n      console.log(\"메세지를 받았습니다.\");\n      console.log(messageObj);\n      if (messageObj.type === 'UPDATE') {\n        console.log(\"update\", messageObj);\n        const content = messageObj.content;\n        const localCards = content.localPlayerCards;\n        console.log(localCards);\n        if (localCards && localCards.length > 0) {\n          setLocalPlayerCards(localCards);\n        }\n      } else if (messageObj.type === 'CHOICE') {\n        console.log(\"choices\", messageObj);\n      }\n    } catch (error) {\n      console.error(`Error parsing received message: ${error}`);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"banker\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"announcement anc-message\",\n      children: receivedMessage ? receivedMessage : 'Waiting for other players...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Local Player Cards:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: localPlayerCards.map(card => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: card\n        }, card, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(Banker, \"PbBXNV5U1p9JTMNhJ0QQLtA3yH8=\");\n_c = Banker;\nexport default Banker;\nvar _c;\n$RefreshReg$(_c, \"Banker\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Banker","props","_s","receivedMessage","localPlayerCards","setLocalPlayerCards","messageObj","JSON","parse","handleReceivedMessage","error","console","message","log","type","content","localCards","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","card","_c","$RefreshReg$"],"sources":["/Users/joshhartnett/ServerStomp/stomp/src/front/banker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction Banker(props) {\n  const { receivedMessage } = props;\n  const [localPlayerCards, setLocalPlayerCards] = useState([]);\n\n  useEffect(() => {\n    if (typeof receivedMessage === 'string') {\n      try {\n        const messageObj = JSON.parse(receivedMessage);\n        handleReceivedMessage(messageObj);\n      } catch (error) {\n        console.error('Error parsing received message:', error);\n      }\n    }\n  }, [receivedMessage]);\n\n  function handleReceivedMessage(message) {\n    try {\n      const messageObj = JSON.parse(message);\n      console.log(\"메세지를 받았습니다.\")\n      console.log(messageObj);\n  \n      if (messageObj.type === 'UPDATE') {\n        console.log(\"update\", messageObj)\n        const content = messageObj.content;\n        const localCards = content.localPlayerCards;\n        console.log(localCards);\n  \n        if (localCards && localCards.length > 0) {\n          setLocalPlayerCards(localCards);\n        }\n      } else if (messageObj.type === 'CHOICE') {\n        console.log(\"choices\", messageObj);\n      }\n    } catch (error) {\n      console.error(`Error parsing received message: ${error}`);\n    }\n  }\n  \n\n  return (\n    <div className=\"banker\">\n      <p className=\"announcement anc-message\">\n        {receivedMessage ? receivedMessage : 'Waiting for other players...'}\n      </p>\n      <div>\n        <p>Local Player Cards:</p>\n        <ul>\n          {localPlayerCards.map((card) => (\n            <li key={card}>{card}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Banker;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,MAAMA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAgB,CAAC,GAAGF,KAAK;EACjC,MAAM,CAACG,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5DC,SAAS,CAAC,MAAM;IACd,IAAI,OAAOM,eAAe,KAAK,QAAQ,EAAE;MACvC,IAAI;QACF,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC;QAC9CM,qBAAqB,CAACH,UAAU,CAAC;MACnC,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;IACF;EACF,CAAC,EAAE,CAACP,eAAe,CAAC,CAAC;EAErB,SAASM,qBAAqBA,CAACG,OAAO,EAAE;IACtC,IAAI;MACF,MAAMN,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACI,OAAO,CAAC;MACtCD,OAAO,CAACE,GAAG,CAAC,aAAa,CAAC;MAC1BF,OAAO,CAACE,GAAG,CAACP,UAAU,CAAC;MAEvB,IAAIA,UAAU,CAACQ,IAAI,KAAK,QAAQ,EAAE;QAChCH,OAAO,CAACE,GAAG,CAAC,QAAQ,EAAEP,UAAU,CAAC;QACjC,MAAMS,OAAO,GAAGT,UAAU,CAACS,OAAO;QAClC,MAAMC,UAAU,GAAGD,OAAO,CAACX,gBAAgB;QAC3CO,OAAO,CAACE,GAAG,CAACG,UAAU,CAAC;QAEvB,IAAIA,UAAU,IAAIA,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;UACvCZ,mBAAmB,CAACW,UAAU,CAAC;QACjC;MACF,CAAC,MAAM,IAAIV,UAAU,CAACQ,IAAI,KAAK,QAAQ,EAAE;QACvCH,OAAO,CAACE,GAAG,CAAC,SAAS,EAAEP,UAAU,CAAC;MACpC;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAE,mCAAkCA,KAAM,EAAC,CAAC;IAC3D;EACF;EAGA,oBACEX,OAAA;IAAKmB,SAAS,EAAC,QAAQ;IAAAC,QAAA,gBACrBpB,OAAA;MAAGmB,SAAS,EAAC,0BAA0B;MAAAC,QAAA,EACpChB,eAAe,GAAGA,eAAe,GAAG;IAA8B;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACjE,eACJxB,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAoB,QAAA,EAAG;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eAC1BxB,OAAA;QAAAoB,QAAA,EACGf,gBAAgB,CAACoB,GAAG,CAAEC,IAAI,iBACzB1B,OAAA;UAAAoB,QAAA,EAAgBM;QAAI,GAAXA,IAAI;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACd;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACD;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV;AAACrB,EAAA,CAtDQF,MAAM;AAAA0B,EAAA,GAAN1B,MAAM;AAwDf,eAAeA,MAAM;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}