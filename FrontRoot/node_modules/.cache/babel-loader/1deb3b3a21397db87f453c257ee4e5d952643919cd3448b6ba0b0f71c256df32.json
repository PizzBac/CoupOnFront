{"ast":null,"code":"var _jsxFileName = \"/Users/joshhartnett/ServerStomp/stomp/src/front/banker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Banker(props) {\n  _s();\n  const {\n    receivedMessage\n  } = props;\n  const [localPlayerCards, setLocalPlayerCards] = useState([]);\n  function handleReceivedMessage(message) {\n    if (typeof message === 'string') {\n      const messageObj = JSON.parse(message);\n      console.log(\"메세지를 받았습니다.\");\n      console.log(messageObj);\n      if (messageObj.type === 'UPDATE') {\n        console.log(\"update\", messageObj);\n        const content = messageObj.content;\n        const localCards = content.localPlayerCards;\n        console.log(localCards);\n        if (localCards && localCards.length > 0) {\n          setLocalPlayerCards(localCards);\n        }\n      } else if (messageObj.type === 'CHOICE') {\n        console.log(\"choices\", messageObj);\n      }\n    }\n  }\n  useEffect(() => {\n    handleReceivedMessage(receivedMessage);\n  }, [receivedMessage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"banker\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"announcement anc-message\",\n      children: receivedMessage ? receivedMessage : \"다른 플레이어의 차례를 기다리고 있습니다.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Local Player Cards:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: localPlayerCards.map(card => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: card\n        }, card, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(Banker, \"PbBXNV5U1p9JTMNhJ0QQLtA3yH8=\");\n_c = Banker;\nvar _c;\n$RefreshReg$(_c, \"Banker\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Banker","props","_s","receivedMessage","localPlayerCards","setLocalPlayerCards","handleReceivedMessage","message","messageObj","JSON","parse","console","log","type","content","localCards","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","card","_c","$RefreshReg$"],"sources":["/Users/joshhartnett/ServerStomp/stomp/src/front/banker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nfunction Banker(props) {\n  const { receivedMessage } = props;\n  const [localPlayerCards, setLocalPlayerCards] = useState([]);\n\n  function handleReceivedMessage(message) {\n    if (typeof message === 'string') {\n      const messageObj = JSON.parse(message);\n      console.log(\"메세지를 받았습니다.\")\n      console.log(messageObj);\n\n      if (messageObj.type === 'UPDATE') {\n        console.log(\"update\", messageObj)\n        const content = messageObj.content;\n        const localCards = content.localPlayerCards;\n        console.log(localCards);\n\n        if (localCards && localCards.length > 0) {\n          setLocalPlayerCards(localCards);\n        }\n      } else if (messageObj.type === 'CHOICE') {\n        console.log(\"choices\", messageObj);\n      }\n    }\n  }\n\n  useEffect(() => {\n    handleReceivedMessage(receivedMessage);\n  }, [receivedMessage]);\n\n  return (\n    <div className=\"banker\">\n      <p className=\"announcement anc-message\">\n        {receivedMessage ? receivedMessage : \"다른 플레이어의 차례를 기다리고 있습니다.\"}\n      </p>\n        <div>\n          <p>Local Player Cards:</p>\n          <ul>\n            {localPlayerCards.map(card => (\n              <li key={card}>{card}</li>\n            ))}\n          </ul>\n        </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnD,SAASC,MAAMA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAgB,CAAC,GAAGF,KAAK;EACjC,MAAM,CAACG,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5D,SAASU,qBAAqBA,CAACC,OAAO,EAAE;IACtC,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC/B,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAAC;MACtCI,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1BD,OAAO,CAACC,GAAG,CAACJ,UAAU,CAAC;MAEvB,IAAIA,UAAU,CAACK,IAAI,KAAK,QAAQ,EAAE;QAChCF,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEJ,UAAU,CAAC;QACjC,MAAMM,OAAO,GAAGN,UAAU,CAACM,OAAO;QAClC,MAAMC,UAAU,GAAGD,OAAO,CAACV,gBAAgB;QAC3CO,OAAO,CAACC,GAAG,CAACG,UAAU,CAAC;QAEvB,IAAIA,UAAU,IAAIA,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;UACvCX,mBAAmB,CAACU,UAAU,CAAC;QACjC;MACF,CAAC,MAAM,IAAIP,UAAU,CAACK,IAAI,KAAK,QAAQ,EAAE;QACvCF,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEJ,UAAU,CAAC;MACpC;IACF;EACF;EAEAX,SAAS,CAAC,MAAM;IACdS,qBAAqB,CAACH,eAAe,CAAC;EACxC,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EAErB,oBACEJ,OAAA;IAAKkB,SAAS,EAAC,QAAQ;IAAAC,QAAA,gBACrBnB,OAAA;MAAGkB,SAAS,EAAC,0BAA0B;MAAAC,QAAA,EACpCf,eAAe,GAAGA,eAAe,GAAG;IAAyB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC5D,eACFvB,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QAAAmB,QAAA,EAAG;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eAC1BvB,OAAA;QAAAmB,QAAA,EACGd,gBAAgB,CAACmB,GAAG,CAACC,IAAI,iBACxBzB,OAAA;UAAAmB,QAAA,EAAgBM;QAAI,GAAXA,IAAI;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACd;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACD;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACJ;AAEV;AAACpB,EAAA,CA5CQF,MAAM;AAAAyB,EAAA,GAANzB,MAAM;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}