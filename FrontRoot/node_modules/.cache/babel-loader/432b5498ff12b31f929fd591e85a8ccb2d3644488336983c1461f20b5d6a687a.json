{"ast":null,"code":"var _jsxFileName = \"/Users/joshhartnett/ServerStomp/stomp/src/ServerQue/StompHookProps.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport StompHook from './StompHook';\nimport { useLocation } from 'react-router-dom';\nimport Banker from '../front/banker';\nimport Console from '../front/console';\nimport Player from '../front/player';\nimport './StompHookProps.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StompHookProps() {\n  _s();\n  // const location = useLocation();\n\n  // const { destination, headers } = location.state;\n  // const lobbyName = headers.lobbyName;\n  const [destination, setDestination] = useState(\"/app/create\");\n  const [lobbyName, setLobbyName] = useState(\"test\");\n  const [headers, setHeaders] = useState({\n    lobbyName: lobbyName\n  });\n  const subscription = \"/user/lobby\";\n  const body = \"Income\";\n  const [receivedMessage, setReceivedMessage] = useState(\"\");\n  const messageListRef = useRef([]);\n  let msg;\n  const handleReceivedMessage = message => {\n    msg = message;\n    setReceivedMessage(message);\n    messageListRef.current = [...messageListRef.current, receivedMessage, msg];\n  };\n  console.log(messageListRef);\n  console.log(messageListRef.current);\n  const updateMessages = messageListRef.current.filter(msg => {\n    // {로 시작하고 }로 끝나는 문자열 중에서 type이 UPDATE인 것만 필터링\n    if (msg.startsWith(\"{\") && msg.endsWith(\"}\") && msg.length > 100) {\n      const parsedMsg = JSON.parse(msg);\n      return parsedMsg.type === \"UPDATE\";\n    } else {\n      return false;\n    }\n  });\n  const chosenMessages = messageListRef.current.filter(msg => {\n    // {로 시작하고 }로 끝나는 문자열 중에서 type이 UPDATE인 것만 필터링\n    if (msg.startsWith(\"{\") && msg.endsWith(\"}\") && msg.length < 100) {\n      const parsedMsg = JSON.parse(msg);\n      return parsedMsg.type === \"UPDATE\";\n    } else {\n      return false;\n    }\n  });\n  const logMessages = messageListRef.current.filter(msg => {\n    // {로 시작하고 }로 끝나는 문자열 중에서 type이 UPDATE인 것만 필터링\n    if (msg.startsWith(\"{\") && msg.endsWith(\"}\")) {\n      const parsedMsg = JSON.parse(msg);\n      return parsedMsg.type === \"LOG\";\n    } else {\n      return false;\n    }\n  });\n  let latestUpdateMessage = [...updateMessages].pop();\n  let latestChosenUpdateMessage = [...chosenMessages].pop();\n  let latestLogMessage = [...logMessages].pop();\n  console.log(latestUpdateMessage);\n  console.log(latestLogMessage);\n  if (JSON.parse(latestUpdateMessage).content.players) {\n    console.log(\"true\");\n  } else {\n    console.log(\"false\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(StompHook, {\n      subscription: subscription,\n      destination: destination,\n      headers: headers,\n      body: body,\n      onReceivedMessage: handleReceivedMessage,\n      lobbyName: lobbyName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"BankerConsole\",\n      children: [/*#__PURE__*/_jsxDEV(Banker, {\n        receivedMessage: receivedMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Console, {\n        destination: destination,\n        lobbyName: lobbyName,\n        body: body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), latestUpdateMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Player\",\n      children: [/*#__PURE__*/_jsxDEV(Player, {\n        localPlayerCards: JSON.parse(latestUpdateMessage).content.localPlayerCards,\n        lobbyName: lobbyName,\n        name: JSON.parse(latestUpdateMessage).content.userName,\n        coins: JSON.parse(latestUpdateMessage).content.coins\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), JSON.parse(latestUpdateMessage).content.players.map((obj, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [obj.name, \" \", obj.coins]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 80\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(StompHookProps, \"qsA7WAP6SkydZWTpy43WSEqGDio=\");\n_c = StompHookProps;\nexport default StompHookProps;\nvar _c;\n$RefreshReg$(_c, \"StompHookProps\");","map":{"version":3,"names":["React","useState","useEffect","useRef","StompHook","useLocation","Banker","Console","Player","jsxDEV","_jsxDEV","StompHookProps","_s","destination","setDestination","lobbyName","setLobbyName","headers","setHeaders","subscription","body","receivedMessage","setReceivedMessage","messageListRef","msg","handleReceivedMessage","message","current","console","log","updateMessages","filter","startsWith","endsWith","length","parsedMsg","JSON","parse","type","chosenMessages","logMessages","latestUpdateMessage","pop","latestChosenUpdateMessage","latestLogMessage","content","players","children","onReceivedMessage","fileName","_jsxFileName","lineNumber","columnNumber","className","localPlayerCards","name","userName","coins","map","obj","index","_c","$RefreshReg$"],"sources":["/Users/joshhartnett/ServerStomp/stomp/src/ServerQue/StompHookProps.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport StompHook from './StompHook';\nimport { useLocation } from 'react-router-dom';\nimport Banker from '../front/banker';\nimport Console from '../front/console';\nimport Player from '../front/player';\n\nimport './StompHookProps.css';\n\nfunction StompHookProps() {\n\n  // const location = useLocation();\n\n  // const { destination, headers } = location.state;\n  // const lobbyName = headers.lobbyName;\n  const [destination, setDestination] = useState(\"/app/create\");\n  const [lobbyName, setLobbyName] = useState(\"test\");\n  const [headers, setHeaders] = useState({lobbyName: lobbyName});\n  const subscription = \"/user/lobby\";\n  const body = \"Income\";\n  const [receivedMessage, setReceivedMessage] = useState(\"\");\n  const messageListRef = useRef([]);\n  \n  let msg;\n\n  const handleReceivedMessage = (message) => {\n    msg = message;\n    setReceivedMessage(message);\n    messageListRef.current = [...messageListRef.current, receivedMessage, msg];\n  };\n\n  console.log(messageListRef);\n  console.log(messageListRef.current);\n\n  const updateMessages = messageListRef.current.filter((msg) => {\n    // {로 시작하고 }로 끝나는 문자열 중에서 type이 UPDATE인 것만 필터링\n    if (msg.startsWith(\"{\") && msg.endsWith(\"}\") && msg.length > 100) {\n      const parsedMsg = JSON.parse(msg);\n      return parsedMsg.type === \"UPDATE\";\n    } else {\n      return false;\n    }\n  });\n\n  const chosenMessages = messageListRef.current.filter((msg) => {\n    // {로 시작하고 }로 끝나는 문자열 중에서 type이 UPDATE인 것만 필터링\n    if (msg.startsWith(\"{\") && msg.endsWith(\"}\") && msg.length < 100) {\n      const parsedMsg = JSON.parse(msg);\n      return parsedMsg.type === \"UPDATE\";\n    } else {\n      return false;\n    }\n  });\n\n  const logMessages = messageListRef.current.filter((msg) => {\n    // {로 시작하고 }로 끝나는 문자열 중에서 type이 UPDATE인 것만 필터링\n    if (msg.startsWith(\"{\") && msg.endsWith(\"}\")) {\n      const parsedMsg = JSON.parse(msg);\n      return parsedMsg.type === \"LOG\";\n    } else {\n      return false;\n    }\n  });\n\n  let latestUpdateMessage = [...updateMessages].pop();\n  let latestChosenUpdateMessage = [...chosenMessages].pop();\n  let latestLogMessage = [...logMessages].pop();\n\n  console.log(latestUpdateMessage);\n  console.log(latestLogMessage);\n\n  if (JSON.parse(latestUpdateMessage).content.players) {\n    console.log(\"true\");\n  } else {\n    console.log(\"false\");\n  }\n\n  return ( \n    <div>\n        <StompHook\n          subscription={subscription}\n          destination={destination}\n          headers={headers}\n          body={body}\n          onReceivedMessage={handleReceivedMessage}\n          lobbyName={lobbyName}\n        />\n        <div className=\"BankerConsole\">\n          <Banker receivedMessage={receivedMessage} />\n          <Console destination={destination} lobbyName={lobbyName} body={body} />\n        </div>\n        {latestUpdateMessage &&\n        <div className=\"Player\">\n          <Player localPlayerCards={JSON.parse(latestUpdateMessage).content.localPlayerCards} \n                  lobbyName={lobbyName} \n                  name={JSON.parse(latestUpdateMessage).content.userName}\n                  coins={JSON.parse(latestUpdateMessage).content.coins}\n          />\n          {JSON.parse(latestUpdateMessage).content.players.map((obj, index) => <li>{obj.name} {obj.coins}</li>)}\n          {/* {JSON.parse(latestUpdateMessage).content.players.map((obj, index) => <Player name={obj.name} coins={obj.coins}/>)} */}\n        </div>\n        \n        }\n    </div>\n  );\n}\n\nexport default StompHookProps;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}