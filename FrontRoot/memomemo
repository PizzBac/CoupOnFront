import React, { useState, useEffect } from 'react';
import StompHook from './StompHook';
import { StompSessionProvider } from 'react-stomp-hooks';
import Banker from '../front/banker';
import Console from '../front/console';
import Modal from '../front/modal';

function StompHookProps() {
  const subscription = "/user/lobby";
  const [destination, setDestination] = useState("/app/create");
  const headers = JSON.stringify({ "lobbyName": "Room1" });
  const [body, setBody] = useState("Income");
  const [receivedMessage, setReceivedMessage] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [selectedContent, setSelectedContent] = useState("");

  const handleReceivedMessage = (message) => {
    if (typeof receivedMessage === 'string' && receivedMessage.trim().startsWith('{') && receivedMessage.trim().endsWith('}')) {
      setReceivedMessage(message);
      const messageObject = JSON.parse(message);
      if (messageObject.type === "CHOICE") {
        setSelectedContent("");
        setShowModal(true);
      }
    }
  };

  // useEffect(() => {
  //   if (typeof receivedMessage === 'string' && receivedMessage.trim().startsWith('{') && receivedMessage.trim().endsWith('}')) {
  //     console.log('JSON형태입니다.');
  //     const message = JSON.parse(receivedMessage);
  //     console.log(message.content);
  //   } else {
  //     console.log('JSON형태가 아닙니다.');
  //   }
  // }, [receivedMessage]);

  const handleGameStart = () => {
    setDestination("/app/game");
  }

  const handleModalClose = () => {
    setShowModal(false);
  };

  const handleContentSelect = (content) => {
    setSelectedContent(content);
    setShowModal(false);

    const message = {
      type: "CHOICE",
      content: content
    };

    const headers = {
      lobbyName: "Room1"
    };

    const messageBody = JSON.stringify(message);
    StompHook.sendMessage(destination, headers, messageBody);
  };

  return (
    <StompSessionProvider url="ws://javaspringbootcoupgamebackend-env.eba-2u3en2tr.ap-northeast-2.elasticbeanstalk.com/ws">
      <StompHook subscription={subscription} destination={destination} headers={headers} body={body} onReceivedMessage={handleReceivedMessage} />
      <Banker receivedMessage={receivedMessage} />
      <Console destination={destination} body={body} setBody={setBody} />
      <button onClick={handleGameStart}>게임 스타트</button>
      {showModal && (
        <Modal handleClose={handleModalClose}>
          {selectedContent === "" && (
            <div>
              <h2>Please select an option:</h2>
              {receivedMessage.content.map((option) => (
                <button key={option} onClick={() => handleContentSelect(option)}>
                  {option}
                </button>
              ))}
            </div>
          )}
          {selectedContent !== "" && <p>You have selected: {selectedContent}</p>}
        </Modal>
      )}
    </StompSessionProvider>
  );
}

export default StompHookProps;
